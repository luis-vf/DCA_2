module signextend #(
        parameter DATA_WIDTH_IN = 16,
        parameter DEPTH = 1,
        parameter DATA_WIDTH_OUT = 32
)(
    input [DATA_WIDTH_IN*DEPTH-1:0]dataIn,
    output  [DATA_WIDTH_OUT*DEPTH-1:0]dataOut
);
/**********
 *  Array Packing Defines
 **********/
//These are preprocessor defines similar to C/C++ preprocessor or VHDL functions
`define PACK_ARRAY(PK_WIDTH,PK_DEPTH,PK_SRC,PK_DEST, BLOCK_ID, GEN_VAR)    genvar GEN_VAR; generate for (GEN_VAR=0; GEN_VAR<(PK_DEPTH); GEN_VAR=GEN_VAR+1) begin: BLOCK_ID assign PK_DEST[((PK_WIDTH)*GEN_VAR+((PK_WIDTH)-1)):((PK_WIDTH)*GEN_VAR)] = PK_SRC[GEN_VAR][((PK_WIDTH)-1):0]; end endgenerate
`define UNPACK_ARRAY(PK_WIDTH,PK_DEPTH,PK_DEST,PK_SRC, BLOCK_ID, GEN_VAR)  genvar GEN_VAR; generate for (GEN_VAR=0; GEN_VAR<(PK_DEPTH); GEN_VAR=GEN_VAR+1) begin: BLOCK_ID assign PK_DEST[GEN_VAR][((PK_WIDTH)-1):0] = PK_SRC[((PK_WIDTH)*GEN_VAR+(PK_WIDTH-1)):((PK_WIDTH)*GEN_VAR)]; end endgenerate

wire [DATA_WIDTH_IN-1:0] tmp [DEPTH-1:0];
reg [DATA_WIDTH_OUT-1:0] extend [DEPTH-1:0]
wire [DATA_WIDTH_OUT*DEPTH-1:0] tmpOut;

`UNPACK_ARRAY(DATA_WIDTH_IN,DEPTH,tmp,dataIn, U_BLK_0, idx_0)

integer i = 0;
integer diff = DATA_WIDTH_OUT - DATA_WIDTH_IN;

always @ (dataIn) begin
    for(i = 0;i < DEPTH;i = i + 1)
    begin
        extend[DATA_WIDTH_IN-1:0] <= tmp[DATA_WIDTH_IN-1:0];
        extend[DATA_WIDTH_OUT-1:DATA_WIDTH_IN] <= {diff{tmp[DATA_WIDTH_IN-1]}};
    end

end
`PACK_ARRAY(DATA_WIDTH_OUT,DEPTH,extend,tmpOut, U_BLK_1, idx_1)

assign dataOut = tmpOut;

endmodule // signextend
